RIL quality check
Mismatch Check Step

This is part of the RIL quality check in which we list the number of sites that do not match either parental genome. Any RIL genome with surmount number of mismatches should be flagged and further investigated, it could represent a genome of something that is not actually a RIL.

This step is performed using custom python3 functions located on two files: pvcf_ril.py and infordepth_functions.py, both contain a series of functions of which only a subset is used here. Dictionaries of parental mismatches - including only sites that completely distinguish the two parents - is created with the script parentalDicts.py and saved as pickled files. These dictionaries will be called independently in the analysis of each individual RIL. The mismatches between each RIL and the parental genomes is calculated with the script onevsparental.py, which uses the RIL vcf and the pickled dictionaries. There is one output file per RIL, listing the total number of (1) Mismatches (sites that don't match any parent), (2) Both (sites that match both, at least partially), (3) P1 (sites that match the 1st parent in the dictionary) and (4) P2 (sites that match the second parent in the dictionary).

In more detail, the first script to be used is parentalDicts.py. It loads both parents' vcf files pass this information to the PF_VCF() function from pvcf_ril.py. This function will open the vcf files together and read them one row at time. If neither row contain missing data and they pass the quality filter (Q>20), the site is analyzed. It also checks whether the site only has information for 1 or 2 bases (i.e. it is not an indel, for example). Then, it will use the function gtParentalVCF() from infordepth_functions.py. gtParentalVCF() returns the genotype of a given vcf file row, it will return 1 base (e.g. "A") in case it is homozygous and a list of 2 bases in case it is heterozygous (i.e. ["C","T"]. If the genotypes are different, also excluding heterozygous with partial match, it saves this information in the dictionary for the specific chromosome (e.g. parent1 genotype "A" and parent2 "A/G" would not be accepted, but "A" and "G/T" would). The information saved will be [genotype1, genotype2] and the dictionary key will be the base position. Then, the script saves the dictionaries of complete mismatches to file, one dicitonary and one file per chromosome arm.

Then, for each RIL, mismatches are calculated with the script onevsparental.py. It will open the aforementioned dictionaries of parental mismatches and the vcf file for the RIL and pass them to the function onexpp() from pvcf_ril.py. Then, the onexpp() function analyzes each site in the RIL that matches a parental mismatch. It will first call the gtParentalVCF() function from infordepth_function.py to obtain the genotype of the RIL for that site and then compare it to the parental genotypes. It will keep track of the number of sites that belong to each of 4 categories, shown in the order in which they appear in the output file: P0 - mismatches, sites that don't match any parental genotype; P - sites that match both at least partially; P1 - sites that match the first parent; and P2 - sites that match the second parent. P1 and P2, the first and second parents, are listed in the order in which the dictionaries of parental mismatches are generated, which is also the order in which I label the pickled files to make it easier to remember.

There will be one final file for each RIL containing the counts, it is a file with just one row. They can be merged to consolidate all the information in a single file. The combining_files.py script can be used to combine the single files.
